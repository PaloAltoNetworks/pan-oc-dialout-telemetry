// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: streaming_telemetry.proto

//package proto;

package proto

import (
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
type DeviceSessionState int32

const (
	DeviceSessionState_SESSION_INIT      DeviceSessionState = 0
	DeviceSessionState_SESSION_STREAMING DeviceSessionState = 1
	DeviceSessionState_SESSION_CLOSING   DeviceSessionState = 2
	DeviceSessionState_SESSION_ERRORED   DeviceSessionState = 3
)

// Enum value maps for DeviceSessionState.
var (
	DeviceSessionState_name = map[int32]string{
		0: "SESSION_INIT",
		1: "SESSION_STREAMING",
		2: "SESSION_CLOSING",
		3: "SESSION_ERRORED",
	}
	DeviceSessionState_value = map[string]int32{
		"SESSION_INIT":      0,
		"SESSION_STREAMING": 1,
		"SESSION_CLOSING":   2,
		"SESSION_ERRORED":   3,
	}
)

func (x DeviceSessionState) Enum() *DeviceSessionState {
	p := new(DeviceSessionState)
	*p = x
	return p
}

func (x DeviceSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_streaming_telemetry_proto_enumTypes[0].Descriptor()
}

func (DeviceSessionState) Type() protoreflect.EnumType {
	return &file_streaming_telemetry_proto_enumTypes[0]
}

func (x DeviceSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceSessionState.Descriptor instead.
func (DeviceSessionState) EnumDescriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{0}
}

// Start a new Device Session on Cloud Telemetry Service
type DeviceSessionStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current timestamp on the device as obtained from "show system info" cli cmd
	DeviceTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=device_time,json=deviceTime,proto3" json:"device_time,omitempty"`
	// uptime of the device as obtained from "show system info" cli cmd
	DeviceUptime string `protobuf:"bytes,2,opt,name=device_uptime,json=deviceUptime,proto3" json:"device_uptime,omitempty"`
	// unique identity of the device
	DeviceIdentity *DeviceIdentity `protobuf:"bytes,3,opt,name=device_identity,json=deviceIdentity,proto3" json:"device_identity,omitempty"`
}

func (x *DeviceSessionStartRequest) Reset() {
	*x = DeviceSessionStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionStartRequest) ProtoMessage() {}

func (x *DeviceSessionStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionStartRequest.ProtoReflect.Descriptor instead.
func (*DeviceSessionStartRequest) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceSessionStartRequest) GetDeviceTime() *timestamp.Timestamp {
	if x != nil {
		return x.DeviceTime
	}
	return nil
}

func (x *DeviceSessionStartRequest) GetDeviceUptime() string {
	if x != nil {
		return x.DeviceUptime
	}
	return ""
}

func (x *DeviceSessionStartRequest) GetDeviceIdentity() *DeviceIdentity {
	if x != nil {
		return x.DeviceIdentity
	}
	return nil
}

// Models device identity metadata, all these fields can be obtained from the device via "show system info" cli cmd
type DeviceIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Serial       string `protobuf:"bytes,1,opt,name=serial,proto3" json:"serial,omitempty"`
	PanosVersion string `protobuf:"bytes,2,opt,name=panos_version,json=panosVersion,proto3" json:"panos_version,omitempty"`
	Family       string `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Model        string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	CloudMode    string `protobuf:"bytes,5,opt,name=cloud_mode,json=cloudMode,proto3" json:"cloud_mode,omitempty"`
	Hostname     string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4Address  string `protobuf:"bytes,7,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	Ipv6Address  string `protobuf:"bytes,8,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	VmUuid       string `protobuf:"bytes,9,opt,name=vm_uuid,json=vmUuid,proto3" json:"vm_uuid,omitempty"`
	VmMode       string `protobuf:"bytes,10,opt,name=vm_mode,json=vmMode,proto3" json:"vm_mode,omitempty"`
}

func (x *DeviceIdentity) Reset() {
	*x = DeviceIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceIdentity) ProtoMessage() {}

func (x *DeviceIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceIdentity.ProtoReflect.Descriptor instead.
func (*DeviceIdentity) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceIdentity) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *DeviceIdentity) GetPanosVersion() string {
	if x != nil {
		return x.PanosVersion
	}
	return ""
}

func (x *DeviceIdentity) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *DeviceIdentity) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceIdentity) GetCloudMode() string {
	if x != nil {
		return x.CloudMode
	}
	return ""
}

func (x *DeviceIdentity) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DeviceIdentity) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *DeviceIdentity) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *DeviceIdentity) GetVmUuid() string {
	if x != nil {
		return x.VmUuid
	}
	return ""
}

func (x *DeviceIdentity) GetVmMode() string {
	if x != nil {
		return x.VmMode
	}
	return ""
}

//
type DeviceSessionStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// globally unique session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// session creation time
	SessionCreatedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=session_created_time,json=sessionCreatedTime,proto3" json:"session_created_time,omitempty"`
	// current state of the device session fsm
	DeviceSessionState DeviceSessionState `protobuf:"varint,3,opt,name=device_session_state,json=deviceSessionState,proto3,enum=com.panw.aiop.stages.DeviceSessionState" json:"device_session_state,omitempty"`
	Status             *Status            `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceSessionStartResponse) Reset() {
	*x = DeviceSessionStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionStartResponse) ProtoMessage() {}

func (x *DeviceSessionStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionStartResponse.ProtoReflect.Descriptor instead.
func (*DeviceSessionStartResponse) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceSessionStartResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeviceSessionStartResponse) GetSessionCreatedTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionCreatedTime
	}
	return nil
}

func (x *DeviceSessionStartResponse) GetDeviceSessionState() DeviceSessionState {
	if x != nil {
		return x.DeviceSessionState
	}
	return DeviceSessionState_SESSION_INIT
}

func (x *DeviceSessionStartResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//
type DiscoverDeviceCapabilityMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// device serial
	Serial             string                `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	DeviceCapabilities []*DeviceCapabilities `protobuf:"bytes,3,rep,name=device_capabilities,json=deviceCapabilities,proto3" json:"device_capabilities,omitempty"`
}

func (x *DiscoverDeviceCapabilityMessage) Reset() {
	*x = DiscoverDeviceCapabilityMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverDeviceCapabilityMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverDeviceCapabilityMessage) ProtoMessage() {}

func (x *DiscoverDeviceCapabilityMessage) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverDeviceCapabilityMessage.ProtoReflect.Descriptor instead.
func (*DiscoverDeviceCapabilityMessage) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *DiscoverDeviceCapabilityMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DiscoverDeviceCapabilityMessage) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *DiscoverDeviceCapabilityMessage) GetDeviceCapabilities() []*DeviceCapabilities {
	if x != nil {
		return x.DeviceCapabilities
	}
	return nil
}

type DeviceCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicePaths     []*gnmi.Path `protobuf:"bytes,1,rep,name=device_paths,json=devicePaths,proto3" json:"device_paths,omitempty"`
	PublishInterval int64        `protobuf:"varint,2,opt,name=publish_interval,json=publishInterval,proto3" json:"publish_interval,omitempty"`
}

func (x *DeviceCapabilities) Reset() {
	*x = DeviceCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCapabilities) ProtoMessage() {}

func (x *DeviceCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCapabilities.ProtoReflect.Descriptor instead.
func (*DeviceCapabilities) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceCapabilities) GetDevicePaths() []*gnmi.Path {
	if x != nil {
		return x.DevicePaths
	}
	return nil
}

func (x *DeviceCapabilities) GetPublishInterval() int64 {
	if x != nil {
		return x.PublishInterval
	}
	return 0
}

type DiscoverDeviceCapabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// device serial
	Serial string  `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Status *Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	//request id
	CloudRequestId string `protobuf:"bytes,4,opt,name=cloud_request_id,json=cloudRequestId,proto3" json:"cloud_request_id,omitempty"`
}

func (x *DiscoverDeviceCapabilityResponse) Reset() {
	*x = DiscoverDeviceCapabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverDeviceCapabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverDeviceCapabilityResponse) ProtoMessage() {}

func (x *DiscoverDeviceCapabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverDeviceCapabilityResponse.ProtoReflect.Descriptor instead.
func (*DiscoverDeviceCapabilityResponse) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *DiscoverDeviceCapabilityResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DiscoverDeviceCapabilityResponse) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *DiscoverDeviceCapabilityResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DiscoverDeviceCapabilityResponse) GetCloudRequestId() string {
	if x != nil {
		return x.CloudRequestId
	}
	return ""
}

//
type StreamDeviceChangeNotificationsDeviceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// device serial
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	//request id
	CloudRequestId           string                    `protobuf:"bytes,3,opt,name=cloud_request_id,json=cloudRequestId,proto3" json:"cloud_request_id,omitempty"`
	DeviceSubscribeResponses []*gnmi.SubscribeResponse `protobuf:"bytes,4,rep,name=device_subscribe_responses,json=deviceSubscribeResponses,proto3" json:"device_subscribe_responses,omitempty"`
	Status                   *Status                   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) Reset() {
	*x = StreamDeviceChangeNotificationsDeviceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceChangeNotificationsDeviceMessage) ProtoMessage() {}

func (x *StreamDeviceChangeNotificationsDeviceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceChangeNotificationsDeviceMessage.ProtoReflect.Descriptor instead.
func (*StreamDeviceChangeNotificationsDeviceMessage) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) GetCloudRequestId() string {
	if x != nil {
		return x.CloudRequestId
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) GetDeviceSubscribeResponses() []*gnmi.SubscribeResponse {
	if x != nil {
		return x.DeviceSubscribeResponses
	}
	return nil
}

func (x *StreamDeviceChangeNotificationsDeviceMessage) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//
type StreamDeviceChangeNotificationsCloudMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// device serial
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	// request id
	CloudRequestId string `protobuf:"bytes,3,opt,name=cloud_request_id,json=cloudRequestId,proto3" json:"cloud_request_id,omitempty"`
	//request for subscribing to a path
	SubscribeRequest *gnmi.SubscribeRequest `protobuf:"bytes,4,opt,name=subscribe_request,json=subscribeRequest,proto3" json:"subscribe_request,omitempty"`
	// blob-only upload url
	DataPushUrl string  `protobuf:"bytes,5,opt,name=data_push_url,json=dataPushUrl,proto3" json:"data_push_url,omitempty"`
	Payload     string  `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	Status      *Status `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StreamDeviceChangeNotificationsCloudMessage) Reset() {
	*x = StreamDeviceChangeNotificationsCloudMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceChangeNotificationsCloudMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceChangeNotificationsCloudMessage) ProtoMessage() {}

func (x *StreamDeviceChangeNotificationsCloudMessage) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceChangeNotificationsCloudMessage.ProtoReflect.Descriptor instead.
func (*StreamDeviceChangeNotificationsCloudMessage) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetCloudRequestId() string {
	if x != nil {
		return x.CloudRequestId
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetSubscribeRequest() *gnmi.SubscribeRequest {
	if x != nil {
		return x.SubscribeRequest
	}
	return nil
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetDataPushUrl() string {
	if x != nil {
		return x.DataPushUrl
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *StreamDeviceChangeNotificationsCloudMessage) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// Terminate the given Device Session on Cloud Telemetry Service
type DeviceSessionTerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// device serial
	Serial string `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
}

func (x *DeviceSessionTerminateRequest) Reset() {
	*x = DeviceSessionTerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionTerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionTerminateRequest) ProtoMessage() {}

func (x *DeviceSessionTerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionTerminateRequest.ProtoReflect.Descriptor instead.
func (*DeviceSessionTerminateRequest) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceSessionTerminateRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeviceSessionTerminateRequest) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

//
type DeviceSessionTerminateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	//
	SessionTerminatedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=session_terminated_time,json=sessionTerminatedTime,proto3" json:"session_terminated_time,omitempty"`
	Status                *Status              `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeviceSessionTerminateResponse) Reset() {
	*x = DeviceSessionTerminateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSessionTerminateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSessionTerminateResponse) ProtoMessage() {}

func (x *DeviceSessionTerminateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSessionTerminateResponse.ProtoReflect.Descriptor instead.
func (*DeviceSessionTerminateResponse) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceSessionTerminateResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *DeviceSessionTerminateResponse) GetSessionTerminatedTime() *timestamp.Timestamp {
	if x != nil {
		return x.SessionTerminatedTime
	}
	return nil
}

func (x *DeviceSessionTerminateResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

//
type QueryDeviceSessionStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *QueryDeviceSessionStatisticsRequest) Reset() {
	*x = QueryDeviceSessionStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDeviceSessionStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceSessionStatisticsRequest) ProtoMessage() {}

func (x *QueryDeviceSessionStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceSessionStatisticsRequest.ProtoReflect.Descriptor instead.
func (*QueryDeviceSessionStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{10}
}

func (x *QueryDeviceSessionStatisticsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

//
type QueryDeviceSessionStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// session identifier
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// current state of the device session fsm
	DeviceSessionState DeviceSessionState `protobuf:"varint,2,opt,name=device_session_state,json=deviceSessionState,proto3,enum=com.panw.aiop.stages.DeviceSessionState" json:"device_session_state,omitempty"`
}

func (x *QueryDeviceSessionStatisticsResponse) Reset() {
	*x = QueryDeviceSessionStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryDeviceSessionStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDeviceSessionStatisticsResponse) ProtoMessage() {}

func (x *QueryDeviceSessionStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDeviceSessionStatisticsResponse.ProtoReflect.Descriptor instead.
func (*QueryDeviceSessionStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{11}
}

func (x *QueryDeviceSessionStatisticsResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *QueryDeviceSessionStatisticsResponse) GetDeviceSessionState() DeviceSessionState {
	if x != nil {
		return x.DeviceSessionState
	}
	return DeviceSessionState_SESSION_INIT
}

//
type QueryServiceStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryServiceStatisticsRequest) Reset() {
	*x = QueryServiceStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceStatisticsRequest) ProtoMessage() {}

func (x *QueryServiceStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceStatisticsRequest.ProtoReflect.Descriptor instead.
func (*QueryServiceStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{12}
}

//
type QueryServiceStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryServiceStatisticsResponse) Reset() {
	*x = QueryServiceStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryServiceStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryServiceStatisticsResponse) ProtoMessage() {}

func (x *QueryServiceStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryServiceStatisticsResponse.ProtoReflect.Descriptor instead.
func (*QueryServiceStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{13}
}

//
// The `Status` type defines a logical error model that is suitable for
// different programming environments, including REST APIs and RPC APIs. It is
// used by [gRPC](https://github.com/grpc). Each `Status` message contains
// three pieces of data: error code, error message, and error details.
//
// You can find out more about this error model and how to work with it in the
// [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status code, which should be an enum value of
	// [google.rpc.Code][google.rpc.Code].
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any
	// user-facing error message should be localized and sent in the
	// details field, or localized by the client.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// A list of messages that carry the error details.
	Details []*any.Any `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streaming_telemetry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_streaming_telemetry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_streaming_telemetry_proto_rawDescGZIP(), []int{14}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Status) GetDetails() []*any.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_streaming_telemetry_proto protoreflect.FileDescriptor

var file_streaming_telemetry_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x67,
	0x6e, 0x6d, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x19, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69,
	0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xae, 0x02, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x6d, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x1a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61,
	0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f,
	0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1f, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x6e, 0x0a,
	0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x6e, 0x6d, 0x69,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xb9, 0x01,
	0x0a, 0x20, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x2c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x1a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69,
	0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x2b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6e, 0x6d, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x50, 0x75, 0x73, 0x68, 0x55,
	0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x56, 0x0a, 0x1d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x17,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70,
	0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a,
	0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69,
	0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x1f, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x20, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0x67, 0x0a, 0x12, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x32, 0xf3, 0x06, 0x0a, 0x15, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e,
	0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77,
	0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e,
	0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x36, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f,
	0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e,
	0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a,
	0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e, 0x61, 0x69, 0x6f, 0x70, 0x2e,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x61, 0x6e, 0x77, 0x2e,
	0x61, 0x69, 0x6f, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_streaming_telemetry_proto_rawDescOnce sync.Once
	file_streaming_telemetry_proto_rawDescData = file_streaming_telemetry_proto_rawDesc
)

func file_streaming_telemetry_proto_rawDescGZIP() []byte {
	file_streaming_telemetry_proto_rawDescOnce.Do(func() {
		file_streaming_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_streaming_telemetry_proto_rawDescData)
	})
	return file_streaming_telemetry_proto_rawDescData
}

var file_streaming_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_streaming_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_streaming_telemetry_proto_goTypes = []interface{}{
	(DeviceSessionState)(0),                              // 0: com.panw.aiop.stages.DeviceSessionState
	(*DeviceSessionStartRequest)(nil),                    // 1: com.panw.aiop.stages.DeviceSessionStartRequest
	(*DeviceIdentity)(nil),                               // 2: com.panw.aiop.stages.DeviceIdentity
	(*DeviceSessionStartResponse)(nil),                   // 3: com.panw.aiop.stages.DeviceSessionStartResponse
	(*DiscoverDeviceCapabilityMessage)(nil),              // 4: com.panw.aiop.stages.DiscoverDeviceCapabilityMessage
	(*DeviceCapabilities)(nil),                           // 5: com.panw.aiop.stages.DeviceCapabilities
	(*DiscoverDeviceCapabilityResponse)(nil),             // 6: com.panw.aiop.stages.DiscoverDeviceCapabilityResponse
	(*StreamDeviceChangeNotificationsDeviceMessage)(nil), // 7: com.panw.aiop.stages.StreamDeviceChangeNotificationsDeviceMessage
	(*StreamDeviceChangeNotificationsCloudMessage)(nil),  // 8: com.panw.aiop.stages.StreamDeviceChangeNotificationsCloudMessage
	(*DeviceSessionTerminateRequest)(nil),                // 9: com.panw.aiop.stages.DeviceSessionTerminateRequest
	(*DeviceSessionTerminateResponse)(nil),               // 10: com.panw.aiop.stages.DeviceSessionTerminateResponse
	(*QueryDeviceSessionStatisticsRequest)(nil),          // 11: com.panw.aiop.stages.QueryDeviceSessionStatisticsRequest
	(*QueryDeviceSessionStatisticsResponse)(nil),         // 12: com.panw.aiop.stages.QueryDeviceSessionStatisticsResponse
	(*QueryServiceStatisticsRequest)(nil),                // 13: com.panw.aiop.stages.QueryServiceStatisticsRequest
	(*QueryServiceStatisticsResponse)(nil),               // 14: com.panw.aiop.stages.QueryServiceStatisticsResponse
	(*Status)(nil),                                       // 15: com.panw.aiop.stages.Status
	(*timestamp.Timestamp)(nil),                          // 16: google.protobuf.Timestamp
	(*gnmi.Path)(nil),                                    // 17: gnmi.Path
	(*gnmi.SubscribeResponse)(nil),                       // 18: gnmi.SubscribeResponse
	(*gnmi.SubscribeRequest)(nil),                        // 19: gnmi.SubscribeRequest
	(*any.Any)(nil),                                      // 20: google.protobuf.Any
}
var file_streaming_telemetry_proto_depIdxs = []int32{
	16, // 0: com.panw.aiop.stages.DeviceSessionStartRequest.device_time:type_name -> google.protobuf.Timestamp
	2,  // 1: com.panw.aiop.stages.DeviceSessionStartRequest.device_identity:type_name -> com.panw.aiop.stages.DeviceIdentity
	16, // 2: com.panw.aiop.stages.DeviceSessionStartResponse.session_created_time:type_name -> google.protobuf.Timestamp
	0,  // 3: com.panw.aiop.stages.DeviceSessionStartResponse.device_session_state:type_name -> com.panw.aiop.stages.DeviceSessionState
	15, // 4: com.panw.aiop.stages.DeviceSessionStartResponse.status:type_name -> com.panw.aiop.stages.Status
	5,  // 5: com.panw.aiop.stages.DiscoverDeviceCapabilityMessage.device_capabilities:type_name -> com.panw.aiop.stages.DeviceCapabilities
	17, // 6: com.panw.aiop.stages.DeviceCapabilities.device_paths:type_name -> gnmi.Path
	15, // 7: com.panw.aiop.stages.DiscoverDeviceCapabilityResponse.status:type_name -> com.panw.aiop.stages.Status
	18, // 8: com.panw.aiop.stages.StreamDeviceChangeNotificationsDeviceMessage.device_subscribe_responses:type_name -> gnmi.SubscribeResponse
	15, // 9: com.panw.aiop.stages.StreamDeviceChangeNotificationsDeviceMessage.status:type_name -> com.panw.aiop.stages.Status
	19, // 10: com.panw.aiop.stages.StreamDeviceChangeNotificationsCloudMessage.subscribe_request:type_name -> gnmi.SubscribeRequest
	15, // 11: com.panw.aiop.stages.StreamDeviceChangeNotificationsCloudMessage.status:type_name -> com.panw.aiop.stages.Status
	16, // 12: com.panw.aiop.stages.DeviceSessionTerminateResponse.session_terminated_time:type_name -> google.protobuf.Timestamp
	15, // 13: com.panw.aiop.stages.DeviceSessionTerminateResponse.status:type_name -> com.panw.aiop.stages.Status
	0,  // 14: com.panw.aiop.stages.QueryDeviceSessionStatisticsResponse.device_session_state:type_name -> com.panw.aiop.stages.DeviceSessionState
	20, // 15: com.panw.aiop.stages.Status.details:type_name -> google.protobuf.Any
	1,  // 16: com.panw.aiop.stages.CloudTelemetryService.DeviceSessionStart:input_type -> com.panw.aiop.stages.DeviceSessionStartRequest
	4,  // 17: com.panw.aiop.stages.CloudTelemetryService.DiscoverDeviceCapability:input_type -> com.panw.aiop.stages.DiscoverDeviceCapabilityMessage
	7,  // 18: com.panw.aiop.stages.CloudTelemetryService.StreamDeviceChangeNotifications:input_type -> com.panw.aiop.stages.StreamDeviceChangeNotificationsDeviceMessage
	9,  // 19: com.panw.aiop.stages.CloudTelemetryService.DeviceSessionTerminate:input_type -> com.panw.aiop.stages.DeviceSessionTerminateRequest
	11, // 20: com.panw.aiop.stages.CloudTelemetryService.QueryDeviceSessionStatistics:input_type -> com.panw.aiop.stages.QueryDeviceSessionStatisticsRequest
	13, // 21: com.panw.aiop.stages.CloudTelemetryService.QueryServiceStatistics:input_type -> com.panw.aiop.stages.QueryServiceStatisticsRequest
	3,  // 22: com.panw.aiop.stages.CloudTelemetryService.DeviceSessionStart:output_type -> com.panw.aiop.stages.DeviceSessionStartResponse
	6,  // 23: com.panw.aiop.stages.CloudTelemetryService.DiscoverDeviceCapability:output_type -> com.panw.aiop.stages.DiscoverDeviceCapabilityResponse
	8,  // 24: com.panw.aiop.stages.CloudTelemetryService.StreamDeviceChangeNotifications:output_type -> com.panw.aiop.stages.StreamDeviceChangeNotificationsCloudMessage
	10, // 25: com.panw.aiop.stages.CloudTelemetryService.DeviceSessionTerminate:output_type -> com.panw.aiop.stages.DeviceSessionTerminateResponse
	12, // 26: com.panw.aiop.stages.CloudTelemetryService.QueryDeviceSessionStatistics:output_type -> com.panw.aiop.stages.QueryDeviceSessionStatisticsResponse
	14, // 27: com.panw.aiop.stages.CloudTelemetryService.QueryServiceStatistics:output_type -> com.panw.aiop.stages.QueryServiceStatisticsResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_streaming_telemetry_proto_init() }
func file_streaming_telemetry_proto_init() {
	if File_streaming_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_streaming_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverDeviceCapabilityMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverDeviceCapabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDeviceChangeNotificationsDeviceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDeviceChangeNotificationsCloudMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionTerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSessionTerminateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDeviceSessionStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryDeviceSessionStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryServiceStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streaming_telemetry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_streaming_telemetry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streaming_telemetry_proto_goTypes,
		DependencyIndexes: file_streaming_telemetry_proto_depIdxs,
		EnumInfos:         file_streaming_telemetry_proto_enumTypes,
		MessageInfos:      file_streaming_telemetry_proto_msgTypes,
	}.Build()
	File_streaming_telemetry_proto = out.File
	file_streaming_telemetry_proto_rawDesc = nil
	file_streaming_telemetry_proto_goTypes = nil
	file_streaming_telemetry_proto_depIdxs = nil
}
