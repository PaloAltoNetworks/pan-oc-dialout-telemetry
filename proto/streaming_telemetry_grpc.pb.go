// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CloudTelemetryServiceClient is the client API for CloudTelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudTelemetryServiceClient interface {
	// Start of the Device session
	DeviceSessionStart(ctx context.Context, in *DeviceSessionStartRequest, opts ...grpc.CallOption) (*DeviceSessionStartResponse, error)
	// Device will  publish all the path on which cloud can send a subscribe request and wait for an ack from cloud
	DiscoverDeviceCapability(ctx context.Context, opts ...grpc.CallOption) (CloudTelemetryService_DiscoverDeviceCapabilityClient, error)
	// Device subscribes to cloud requests over a bi-directional grpc stream in long client streaming mode. This bi-directional grpc
	// stream will be used by the Cloud Telemetry Service to send 2 types of control messages to the Device Telemetry Bridge:
	// gNMI Get rpc: Get method will be use to collect on-demand telemetry
	// gNMI Subscribe rpc: Subscribe method will be used to stream delta Device Notifications
	// Device streams 1 or more Device Notification messages to Cloud over a bi-directional grpc stream
	StreamDeviceChangeNotifications(ctx context.Context, opts ...grpc.CallOption) (CloudTelemetryService_StreamDeviceChangeNotificationsClient, error)
	// Device requests Cloud Telemetry Service to terminate the given Device Session
	DeviceSessionTerminate(ctx context.Context, in *DeviceSessionTerminateRequest, opts ...grpc.CallOption) (*DeviceSessionTerminateResponse, error)
	// Query Cloud Telemetry Service for statistics associated with the given Device Session
	QueryDeviceSessionStatistics(ctx context.Context, in *QueryDeviceSessionStatisticsRequest, opts ...grpc.CallOption) (*QueryDeviceSessionStatisticsResponse, error)
	// Query Cloud Telemetry Service for Service Statistics associated with all live Device Sessions
	QueryServiceStatistics(ctx context.Context, in *QueryServiceStatisticsRequest, opts ...grpc.CallOption) (*QueryServiceStatisticsResponse, error)
}

type cloudTelemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudTelemetryServiceClient(cc grpc.ClientConnInterface) CloudTelemetryServiceClient {
	return &cloudTelemetryServiceClient{cc}
}

func (c *cloudTelemetryServiceClient) DeviceSessionStart(ctx context.Context, in *DeviceSessionStartRequest, opts ...grpc.CallOption) (*DeviceSessionStartResponse, error) {
	out := new(DeviceSessionStartResponse)
	err := c.cc.Invoke(ctx, "/com.panw.aiop.stages.CloudTelemetryService/DeviceSessionStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTelemetryServiceClient) DiscoverDeviceCapability(ctx context.Context, opts ...grpc.CallOption) (CloudTelemetryService_DiscoverDeviceCapabilityClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudTelemetryService_ServiceDesc.Streams[0], "/com.panw.aiop.stages.CloudTelemetryService/DiscoverDeviceCapability", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudTelemetryServiceDiscoverDeviceCapabilityClient{stream}
	return x, nil
}

type CloudTelemetryService_DiscoverDeviceCapabilityClient interface {
	Send(*DiscoverDeviceCapabilityMessage) error
	Recv() (*DiscoverDeviceCapabilityResponse, error)
	grpc.ClientStream
}

type cloudTelemetryServiceDiscoverDeviceCapabilityClient struct {
	grpc.ClientStream
}

func (x *cloudTelemetryServiceDiscoverDeviceCapabilityClient) Send(m *DiscoverDeviceCapabilityMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudTelemetryServiceDiscoverDeviceCapabilityClient) Recv() (*DiscoverDeviceCapabilityResponse, error) {
	m := new(DiscoverDeviceCapabilityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudTelemetryServiceClient) StreamDeviceChangeNotifications(ctx context.Context, opts ...grpc.CallOption) (CloudTelemetryService_StreamDeviceChangeNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudTelemetryService_ServiceDesc.Streams[1], "/com.panw.aiop.stages.CloudTelemetryService/StreamDeviceChangeNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudTelemetryServiceStreamDeviceChangeNotificationsClient{stream}
	return x, nil
}

type CloudTelemetryService_StreamDeviceChangeNotificationsClient interface {
	Send(*StreamDeviceChangeNotificationsDeviceMessage) error
	Recv() (*StreamDeviceChangeNotificationsCloudMessage, error)
	grpc.ClientStream
}

type cloudTelemetryServiceStreamDeviceChangeNotificationsClient struct {
	grpc.ClientStream
}

func (x *cloudTelemetryServiceStreamDeviceChangeNotificationsClient) Send(m *StreamDeviceChangeNotificationsDeviceMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudTelemetryServiceStreamDeviceChangeNotificationsClient) Recv() (*StreamDeviceChangeNotificationsCloudMessage, error) {
	m := new(StreamDeviceChangeNotificationsCloudMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cloudTelemetryServiceClient) DeviceSessionTerminate(ctx context.Context, in *DeviceSessionTerminateRequest, opts ...grpc.CallOption) (*DeviceSessionTerminateResponse, error) {
	out := new(DeviceSessionTerminateResponse)
	err := c.cc.Invoke(ctx, "/com.panw.aiop.stages.CloudTelemetryService/DeviceSessionTerminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTelemetryServiceClient) QueryDeviceSessionStatistics(ctx context.Context, in *QueryDeviceSessionStatisticsRequest, opts ...grpc.CallOption) (*QueryDeviceSessionStatisticsResponse, error) {
	out := new(QueryDeviceSessionStatisticsResponse)
	err := c.cc.Invoke(ctx, "/com.panw.aiop.stages.CloudTelemetryService/QueryDeviceSessionStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTelemetryServiceClient) QueryServiceStatistics(ctx context.Context, in *QueryServiceStatisticsRequest, opts ...grpc.CallOption) (*QueryServiceStatisticsResponse, error) {
	out := new(QueryServiceStatisticsResponse)
	err := c.cc.Invoke(ctx, "/com.panw.aiop.stages.CloudTelemetryService/QueryServiceStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudTelemetryServiceServer is the server API for CloudTelemetryService service.
// All implementations must embed UnimplementedCloudTelemetryServiceServer
// for forward compatibility
type CloudTelemetryServiceServer interface {
	// Start of the Device session
	DeviceSessionStart(context.Context, *DeviceSessionStartRequest) (*DeviceSessionStartResponse, error)
	// Device will  publish all the path on which cloud can send a subscribe request and wait for an ack from cloud
	DiscoverDeviceCapability(CloudTelemetryService_DiscoverDeviceCapabilityServer) error
	// Device subscribes to cloud requests over a bi-directional grpc stream in long client streaming mode. This bi-directional grpc
	// stream will be used by the Cloud Telemetry Service to send 2 types of control messages to the Device Telemetry Bridge:
	// gNMI Get rpc: Get method will be use to collect on-demand telemetry
	// gNMI Subscribe rpc: Subscribe method will be used to stream delta Device Notifications
	// Device streams 1 or more Device Notification messages to Cloud over a bi-directional grpc stream
	StreamDeviceChangeNotifications(CloudTelemetryService_StreamDeviceChangeNotificationsServer) error
	// Device requests Cloud Telemetry Service to terminate the given Device Session
	DeviceSessionTerminate(context.Context, *DeviceSessionTerminateRequest) (*DeviceSessionTerminateResponse, error)
	// Query Cloud Telemetry Service for statistics associated with the given Device Session
	QueryDeviceSessionStatistics(context.Context, *QueryDeviceSessionStatisticsRequest) (*QueryDeviceSessionStatisticsResponse, error)
	// Query Cloud Telemetry Service for Service Statistics associated with all live Device Sessions
	QueryServiceStatistics(context.Context, *QueryServiceStatisticsRequest) (*QueryServiceStatisticsResponse, error)
	mustEmbedUnimplementedCloudTelemetryServiceServer()
}

// UnimplementedCloudTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloudTelemetryServiceServer struct {
}

func (UnimplementedCloudTelemetryServiceServer) DeviceSessionStart(context.Context, *DeviceSessionStartRequest) (*DeviceSessionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceSessionStart not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) DiscoverDeviceCapability(CloudTelemetryService_DiscoverDeviceCapabilityServer) error {
	return status.Errorf(codes.Unimplemented, "method DiscoverDeviceCapability not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) StreamDeviceChangeNotifications(CloudTelemetryService_StreamDeviceChangeNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceChangeNotifications not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) DeviceSessionTerminate(context.Context, *DeviceSessionTerminateRequest) (*DeviceSessionTerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceSessionTerminate not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) QueryDeviceSessionStatistics(context.Context, *QueryDeviceSessionStatisticsRequest) (*QueryDeviceSessionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeviceSessionStatistics not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) QueryServiceStatistics(context.Context, *QueryServiceStatisticsRequest) (*QueryServiceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServiceStatistics not implemented")
}
func (UnimplementedCloudTelemetryServiceServer) mustEmbedUnimplementedCloudTelemetryServiceServer() {}

// UnsafeCloudTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudTelemetryServiceServer will
// result in compilation errors.
type UnsafeCloudTelemetryServiceServer interface {
	mustEmbedUnimplementedCloudTelemetryServiceServer()
}

func RegisterCloudTelemetryServiceServer(s grpc.ServiceRegistrar, srv CloudTelemetryServiceServer) {
	s.RegisterService(&CloudTelemetryService_ServiceDesc, srv)
}

func _CloudTelemetryService_DeviceSessionStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSessionStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTelemetryServiceServer).DeviceSessionStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.panw.aiop.stages.CloudTelemetryService/DeviceSessionStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTelemetryServiceServer).DeviceSessionStart(ctx, req.(*DeviceSessionStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTelemetryService_DiscoverDeviceCapability_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudTelemetryServiceServer).DiscoverDeviceCapability(&cloudTelemetryServiceDiscoverDeviceCapabilityServer{stream})
}

type CloudTelemetryService_DiscoverDeviceCapabilityServer interface {
	Send(*DiscoverDeviceCapabilityResponse) error
	Recv() (*DiscoverDeviceCapabilityMessage, error)
	grpc.ServerStream
}

type cloudTelemetryServiceDiscoverDeviceCapabilityServer struct {
	grpc.ServerStream
}

func (x *cloudTelemetryServiceDiscoverDeviceCapabilityServer) Send(m *DiscoverDeviceCapabilityResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudTelemetryServiceDiscoverDeviceCapabilityServer) Recv() (*DiscoverDeviceCapabilityMessage, error) {
	m := new(DiscoverDeviceCapabilityMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudTelemetryService_StreamDeviceChangeNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudTelemetryServiceServer).StreamDeviceChangeNotifications(&cloudTelemetryServiceStreamDeviceChangeNotificationsServer{stream})
}

type CloudTelemetryService_StreamDeviceChangeNotificationsServer interface {
	Send(*StreamDeviceChangeNotificationsCloudMessage) error
	Recv() (*StreamDeviceChangeNotificationsDeviceMessage, error)
	grpc.ServerStream
}

type cloudTelemetryServiceStreamDeviceChangeNotificationsServer struct {
	grpc.ServerStream
}

func (x *cloudTelemetryServiceStreamDeviceChangeNotificationsServer) Send(m *StreamDeviceChangeNotificationsCloudMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudTelemetryServiceStreamDeviceChangeNotificationsServer) Recv() (*StreamDeviceChangeNotificationsDeviceMessage, error) {
	m := new(StreamDeviceChangeNotificationsDeviceMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CloudTelemetryService_DeviceSessionTerminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSessionTerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTelemetryServiceServer).DeviceSessionTerminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.panw.aiop.stages.CloudTelemetryService/DeviceSessionTerminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTelemetryServiceServer).DeviceSessionTerminate(ctx, req.(*DeviceSessionTerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTelemetryService_QueryDeviceSessionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceSessionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTelemetryServiceServer).QueryDeviceSessionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.panw.aiop.stages.CloudTelemetryService/QueryDeviceSessionStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTelemetryServiceServer).QueryDeviceSessionStatistics(ctx, req.(*QueryDeviceSessionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTelemetryService_QueryServiceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTelemetryServiceServer).QueryServiceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.panw.aiop.stages.CloudTelemetryService/QueryServiceStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTelemetryServiceServer).QueryServiceStatistics(ctx, req.(*QueryServiceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudTelemetryService_ServiceDesc is the grpc.ServiceDesc for CloudTelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudTelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.panw.aiop.stages.CloudTelemetryService",
	HandlerType: (*CloudTelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceSessionStart",
			Handler:    _CloudTelemetryService_DeviceSessionStart_Handler,
		},
		{
			MethodName: "DeviceSessionTerminate",
			Handler:    _CloudTelemetryService_DeviceSessionTerminate_Handler,
		},
		{
			MethodName: "QueryDeviceSessionStatistics",
			Handler:    _CloudTelemetryService_QueryDeviceSessionStatistics_Handler,
		},
		{
			MethodName: "QueryServiceStatistics",
			Handler:    _CloudTelemetryService_QueryServiceStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiscoverDeviceCapability",
			Handler:       _CloudTelemetryService_DiscoverDeviceCapability_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDeviceChangeNotifications",
			Handler:       _CloudTelemetryService_StreamDeviceChangeNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streaming_telemetry.proto",
}
